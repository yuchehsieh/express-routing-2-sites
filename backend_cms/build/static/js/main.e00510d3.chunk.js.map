{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","basename","to","path","About","Users","axios","defaults","baseURL","Home","useState","imgSrc","setImgSrc","useEffect","fetchData","a","axiosRequestConfig","responseType","get","response","type","headers","blob","data","file","File","toImageBase64Url","base64","img","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PASe,SAASA,IACtB,OACE,cAAC,IAAD,CAAQC,SAAS,aAAjB,SACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAON,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAZ,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,cAACE,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,IAAZ,SACE,cAAC,EAAD,cA9BZG,IAAMC,SAASC,QAFQ,gDAwCvB,IAAMC,EAAO,WACX,MAA4BC,qBAA5B,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAS,uCAAG,sCAAAC,EAAA,6DACVC,EAAqB,CACzBC,aAAc,QAFA,SAKOX,IAAMY,IAAI,WAAYF,GAL7B,cAKVG,EALU,OAOVC,EAAOD,EAASE,QAAQ,gBACxBC,EAAOH,EAASI,KAGhBC,EAAO,IAAIC,KAAK,CAACH,GAAO,SAAU,CAAEF,SAX1B,SAYKM,EAAiBF,GAZtB,OAYVG,EAZU,OAahBf,EAAUe,GAbM,4CAAH,qDAgBTD,EAAmB,SAACE,GACxB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,kBAAMJ,EAAQE,EAAOG,SACxCH,EAAOI,QAAUL,EAEbH,aAAeH,MACjBO,EAAOK,cAAcT,OAI3B,OACE,qCACE,sCACA,qBAAKU,IAAK3B,EAAQ4B,IAAI,YAK5B,SAASnC,IACP,OAAO,uCAGT,SAASC,IACP,OAAO,uCC5FT,IAYemC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnD,EAAD,MAEFoD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e00510d3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst devApiBaseUrl = \"http://localhost:5000\";\nconst prodApiBaseUrl = 'https://express-routing-2-sites.herokuapp.com'\n\naxios.defaults.baseURL = process.env.NODE_ENV === 'development' ? devApiBaseUrl : prodApiBaseUrl;\n\nexport default function App() {\n  return (\n    <Router basename=\"/backstage\">\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => {\n  const [imgSrc, setImgSrc] = useState();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const axiosRequestConfig = {\n      responseType: \"blob\",\n    };\n\n    const response = await axios.get(\"/api/img\", axiosRequestConfig);\n\n    const type = response.headers[\"content-type\"];\n    const blob = response.data;\n\n    /* Convert to file */\n    const file = new File([blob], \"123456\", { type });\n    const base64 = await toImageBase64Url(file);\n    setImgSrc(base64);\n  };\n\n  const toImageBase64Url = (img) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n\n      if (img instanceof File) {\n        reader.readAsDataURL(img);\n      }\n    });\n  };\n  return (\n    <>\n      <h2>Home</h2>\n      <img src={imgSrc} alt=\"IMG\" />\n    </>\n  );\n};\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}